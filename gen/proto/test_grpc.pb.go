// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.0
// source: test.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// HelloApiClient is the client API for HelloApi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HelloApiClient interface {
	WriteHello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloResponse, error)
	GetDate(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*DateResponse, error)
}

type helloApiClient struct {
	cc grpc.ClientConnInterface
}

func NewHelloApiClient(cc grpc.ClientConnInterface) HelloApiClient {
	return &helloApiClient{cc}
}

func (c *helloApiClient) WriteHello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloResponse, error) {
	out := new(HelloResponse)
	err := c.cc.Invoke(ctx, "/main.HelloApi/WriteHello", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *helloApiClient) GetDate(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*DateResponse, error) {
	out := new(DateResponse)
	err := c.cc.Invoke(ctx, "/main.HelloApi/GetDate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HelloApiServer is the server API for HelloApi service.
// All implementations must embed UnimplementedHelloApiServer
// for forward compatibility
type HelloApiServer interface {
	WriteHello(context.Context, *HelloRequest) (*HelloResponse, error)
	GetDate(context.Context, *emptypb.Empty) (*DateResponse, error)
	mustEmbedUnimplementedHelloApiServer()
}

// UnimplementedHelloApiServer must be embedded to have forward compatible implementations.
type UnimplementedHelloApiServer struct {
}

func (UnimplementedHelloApiServer) WriteHello(context.Context, *HelloRequest) (*HelloResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WriteHello not implemented")
}
func (UnimplementedHelloApiServer) GetDate(context.Context, *emptypb.Empty) (*DateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDate not implemented")
}
func (UnimplementedHelloApiServer) mustEmbedUnimplementedHelloApiServer() {}

// UnsafeHelloApiServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HelloApiServer will
// result in compilation errors.
type UnsafeHelloApiServer interface {
	mustEmbedUnimplementedHelloApiServer()
}

func RegisterHelloApiServer(s grpc.ServiceRegistrar, srv HelloApiServer) {
	s.RegisterService(&HelloApi_ServiceDesc, srv)
}

func _HelloApi_WriteHello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelloRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HelloApiServer).WriteHello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.HelloApi/WriteHello",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HelloApiServer).WriteHello(ctx, req.(*HelloRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HelloApi_GetDate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HelloApiServer).GetDate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.HelloApi/GetDate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HelloApiServer).GetDate(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// HelloApi_ServiceDesc is the grpc.ServiceDesc for HelloApi service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HelloApi_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "main.HelloApi",
	HandlerType: (*HelloApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "WriteHello",
			Handler:    _HelloApi_WriteHello_Handler,
		},
		{
			MethodName: "GetDate",
			Handler:    _HelloApi_GetDate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "test.proto",
}
